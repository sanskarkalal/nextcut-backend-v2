// prisma/schema.prisma - Updated Schema with Phone Support
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id          Int      @id @default(autoincrement())
    name        String
    phoneNumber String   @unique // Changed from email to phone
    createdAt   DateTime @default(now())

    // queue status flags
    inQueue        Boolean @default(false)
    queuedBarberId Int?

    // Relations
    Queue          Queue?
    ServiceHistory ServiceHistory[]

    @@index([queuedBarberId])
    @@index([phoneNumber])
}

model Barber {
    id           Int      @id @default(autoincrement())
    name         String
    username     String   @unique
    passwordHash String
    lat          Float
    long         Float
    createdAt    DateTime @default(now())

    // Relations
    queueEntries   Queue[]
    serviceHistory ServiceHistory[]
}

model Queue {
    id        Int      @id @default(autoincrement())
    enteredAt DateTime @default(now())
    service   String // "haircut", "beard", "haircut+beard"

    barber   Barber @relation(fields: [barberId], references: [id])
    barberId Int

    user   User @relation(fields: [userId], references: [id])
    userId Int

    @@unique([userId])
    @@index([barberId, enteredAt])
}

model ServiceHistory {
    id       Int      @id @default(autoincrement())
    barberId Int
    userId   Int
    service  String // "haircut", "beard", "haircut+beard"
    servedAt DateTime @default(now())

    barber Barber @relation(fields: [barberId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@index([barberId, servedAt])
    @@index([userId, servedAt])
}
